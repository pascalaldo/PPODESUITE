\chapter[Usage]{Usage}
\section[ODE Function]{The ODE Function}
\subsection{Introduction}
The ODE function of the problem should be written in \Fortran 95. Here are some main \Fortran peculiarities to consider when writing \Fortran code.
\begin{description}
 \item[Line Formatting] The maximum line width is 72 characters. The first character is used to indicate whether the line is a comment line. The second to fifth character are used to indicate labels. The $6^{th}$ character is used to indicate the continuation of the previous line.
 \begin{lstlisting}[style=fortrancode,caption=Syntax Example]
c         1         2         3         4         5         6         7
c23456789012345678901234567890123456789012345678901234567890123456789012

! Comments should be introduced by either a 'c' or a '!'.
      if (answer .gt. 42) go to 4242
 4242 ydot(s) = y(1) * (kp * y(s - 1) - gp * y(s)) + gm * y(s + 1) +
     + km * y(s)
 \end{lstlisting}
 \item[For Loops] For loops are written using the \sourceword{do} statement. They should be written in the form \sourceword{do \ph{label} \ph{var}=\ph{start}, \ph{stop}[, \ph{step}]}. The label should refer to a \sourceword{continue} statement at the end of the loop.
  \begin{lstlisting}[style=fortrancode,caption=Do-Loop]
      a = 0
      do 42 i=1, 20
        a = a + 1
   42 continue
! a has the value 20 here.
 \end{lstlisting}
 \item[Case Sensitivity] The \Fortran language is not case sensitive.
\end{description}

\subsection{Template}
The \Fortran subroutine that defines the ODE system should have the following arguments:
\begin{description}
 \item[neq] \emph{input} Number of equations.
 \item[t] \emph{input} The current time point.
 \item[y] \emph{input} The current value of all states. The length of this vector is equal to \sourceword{neq}.
 \item[ydot] \emph{output} This is a vector of length \sourceword{neq} to which all derivatives of the states should be written.
\end{description}
The parameters are passed using a \sourceword{common} block. The variable \textbf{np} represents the number of parameters. The vector \textbf{p} contains the values of all parameters.

\lstinputlisting[style=fortrancode,caption=ODE Template]{ODETemplate.F}

Examples can be found in the \filepath{\ph{\PPODESUITE Source}/examples} folder.

\subsection{Sparse Jacobian Matrix}
When using the solver that uses a sparse matrix implementation for the Jacobian matrix, the number of non-zero values of the Jacobian matrix should be supplied. This is done using a \Fortran subroutine called \sourceword{nonzero}. The arguments of this subroutine are the following:
\begin{description}
 \item[neq] \emph{input} Number of equations.
 \item[npar] \emph{input} Number of parameters.
 \item[par] \emph{input} The values of all parameters. Contrary to the ODE function, where the number of parameters and parameter values are supplied using a \sourceword{common} block, both are given as arguments here.
 \item[nnz] \emph{output} The number of nonzero elements in the Jacobian matrix. This value can be determined using the definition of the Jacobian matrix:
 \begin{equation}
  J_{m,n} =
  \begin{pmatrix}
   \frac{\partial F_1}{\partial x_1} & \cdots & \frac{\partial F_1}{\partial x_n} \\
   \vdots & \ddots & \vdots  \\
   \frac{\partial F_m}{\partial x_1} & \cdots & \frac{\partial F_m}{\partial x_n}
  \end{pmatrix}
 \end{equation}
 In the case of an ODE system, $m$ and $n$ are both equal to the number of equations. $F$ represents the system of ODEs.
 The number of nonzero elements can also be determined using trial and error. By just trying some values for \sourceword{nnz}, the error messages might give away the correlation between \sourceword{nnz} and the parameter and number of equations.
\end{description}

\section[Building]{Building the MEX Function}
The \MATLAB function \sourceword{PPODE\_build}, included in the \PPODESUITE, can be used to build the ODE \Fortran file against the right solver libraries. First of all, make sure the \PPODESUITE paths are added to the \MATLAB path variable.
\matlabcmd{PPODE\_addPaths}
And the libraries are build.
\matlabcmd{PPODE\_init}
Now the function \sourceword{PPODE\_build} can be used. Extensive help can of course be acquired using \matlabcmdinline{help PPODE\_build}. The simplest usage of the function is the following:
\matlabcmd{PPODE\_build('odeproblem.F', 'odeproblem\_stiffsolver')}
This command will generate a MEX file named 'odeproblem\_stiffsolver' of the problem defined by 'odeproblem.F', using the default (stiff) solver. The correct file extension is automatically added to the MEX file, so do not supply an extension for the second function argument.

The first two mandatory arguments, extra options can be specified. This is done by first giving the option name and then the value. For example, if the problem is not stiff and one would like verbose output, a non-stiff solver should be specified and the verbose mode should be enabled:
\matlabcmd{PPODE\_build('odeproblem.F', 'odeproblem\_stiffsolver', ...\\\indent\indent'Solver', 'Non-Stiff', 'Verbose', 1)}
Note that both the option name and value are case insensitive.

\section[Execution]{Executing the MEX Function}
The MEX function generated by the PPODE build function can be called as follows:
\matlabcmd{\ph{Target Name}(\ph{Number of ODEs}, \ph{Absolute Tolerance}, ... \\\indent\indent
\ph{Relative Tolerance}, \ph{Time Points}, \ph{Parameters}, \ph{Initial Values})}